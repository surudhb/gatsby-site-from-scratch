{"version":3,"sources":["webpack:///./src/utils/helpers.js","webpack:///./src/pages/resume.js"],"names":["getImageMap","images","regex","hasMultipleImages","limit","reduce","map","image","slug","node","relativePath","match","hasOwnProperty","length","push","childImageSharp","fluid","arr","getInstitutionClass","name","includes","data","institutions","site","siteMetadata","history","allMarkdownRemark","edges","allFile","imageMap","Utils","title","href","target","download","style","fontSize","icon","className","program","link","description","key","rel","id","frontmatter","fields","html","query"],"mappings":"oOAAe,G,8BAAA,CACbA,YAAa,SAACC,EAAQC,EAAOC,EAA2BC,GACtD,YADoE,IAAzCD,OAAoB,QAAqB,IAAdC,MAAQ,GACvDH,EAAOI,QAAO,SAACC,EAAKC,GACzB,IAAMC,EAAOD,EAAME,KAAKC,aAAaC,MAAMT,GAAO,GAClD,GAAIC,EACF,GAAIG,EAAIM,eAAeJ,GACjBF,EAAIE,GAAMK,QAAUT,GACtBE,EAAIE,GAAMM,KAAKP,EAAME,KAAKM,gBAAgBC,WACvC,CACL,IAAMC,EAAM,GACZA,EAAIH,KAAKP,EAAME,KAAKM,gBAAgBC,OACpCV,EAAIE,GAAQS,OAGdX,EAAIE,GAAQD,EAAME,KAAKM,gBAAgBC,MAEzC,OAAOV,IACN,KAELY,oBAAqB,SAAAC,GACnB,OAAIA,EAAKC,SAAS,YACV,gBACGD,EAAKC,SAAS,UACjB,cAEA,c,4KClBG,sBAAe,IAAZC,EAAW,EAAXA,KACVC,EAAeD,EAAKE,KAAKC,aAAaF,cAAgB,GACtDG,EAAUJ,EAAKK,kBAAkBC,OAAS,GAC1C1B,EAASoB,EAAKO,QAAQD,OAAS,GAC/BE,EAAWC,IAAM9B,YAAYC,EAAQ,kBAC3C,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAK8B,MAAM,WACX,kBAAC,IAAD,CAAWA,MAAM,UAAjB,IAEE,uBAAGC,KAAK,kCAAkCC,OAAO,SAASC,UAAQ,GAChE,kBAAC,IAAD,CACEC,MAAO,CAAEC,SAAU,QACnBC,KAAM,CAAC,MAAO,iBACdC,UAAU,iBAIhB,kBAAC,IAAD,CAAWtB,OAAK,IAChB,kBAAC,IAAD,CAAWsB,UAAU,YAAYtB,OAAK,GACpC,6BACA,wBAAIsB,UAAU,yBAAd,aACA,wBAAIA,UAAU,cACd,kBAAC,IAAD,CAAWtB,OAAK,EAACsB,UAAU,kBACzB,4BACGhB,EAAahB,KAAI,gBAAGa,EAAH,EAAGA,KAAMoB,EAAT,EAASA,QAASC,EAAlB,EAAkBA,KAAMC,EAAxB,EAAwBA,YAAxB,OAChB,wBACEH,UAAU,YACVI,IAAKvB,EACLgB,MAAO,CAAEC,SAAU,YAEnB,uBACEE,UAAWR,IAAMZ,oBAAoBC,GACrCc,OAAO,SACPU,IAAI,sBACJX,KAAMQ,GAELrB,GACE,IACL,+BACE,8BACE,2BAAIoB,GADN,IACoB,KAEpB,0BAAMD,UAAU,kBAAkBG,IAEpC,mCAKR,6BACA,wBAAIH,UAAU,yBAAd,cACA,wBAAIA,UAAU,cACd,6BACCb,EAAQnB,KAAI,gBAAGG,EAAH,EAAGA,KAAH,OACX,yBAAKiC,IAAKjC,EAAKmC,IACb,kBAAC,IAAD,CACEC,YAAapC,EAAKoC,YAClBtC,MAAOsB,EAASpB,EAAKqC,OAAOtC,MAC5BuC,KAAMtC,EAAKsC,OAEb,wBAAIT,UAAU,gBAQnB,IAAMU,EAAK","file":"component---src-pages-resume-js-699cd8b50ce92cca965a.js","sourcesContent":["export default {\n  getImageMap: (images, regex, hasMultipleImages = false, limit = 3) => {\n    return images.reduce((map, image) => {\n      const slug = image.node.relativePath.match(regex)[0]\n      if (hasMultipleImages) {\n        if (map.hasOwnProperty(slug)) {\n          if (map[slug].length <= limit)\n            map[slug].push(image.node.childImageSharp.fluid)\n        } else {\n          const arr = []\n          arr.push(image.node.childImageSharp.fluid)\n          map[slug] = arr\n        }\n      } else {\n        map[slug] = image.node.childImageSharp.fluid\n      }\n      return map\n    }, {})\n  },\n  getInstitutionClass: name => {\n    if (name.includes(\"Waterloo\")) {\n      return `waterloo-link`\n    } else if (name.includes(\"Ottawa\")) {\n      return `ottawa-link`\n    } else {\n      return `nd-link`\n    }\n  },\n}\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { PageLayout, PageTitle, WorkHistory } from \"../components\"\nimport { SEO, Utils } from \"../utils\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport Container from \"react-bootstrap/Container\"\n\nexport default ({ data }) => {\n  const institutions = data.site.siteMetadata.institutions || []\n  const history = data.allMarkdownRemark.edges || []\n  const images = data.allFile.edges || []\n  const imageMap = Utils.getImageMap(images, /\\/[work].*\\/|$/)\n  return (\n    <PageLayout>\n      <SEO title=\"Resume\" />\n      <PageTitle title=\"Resume\">\n        &nbsp;\n        <a href=\"../../surudh_bhutani_resume.pdf\" target=\"_blank\" download>\n          <FontAwesomeIcon\n            style={{ fontSize: \"2rem\" }}\n            icon={[\"fas\", \"file-download\"]}\n            className=\"icons file\"\n          />\n        </a>\n      </PageTitle>\n      <Container fluid></Container>\n      <Container className=\"mt-5 pt-3\" fluid>\n        <br />\n        <h2 className=\"m-auto w-75 text-left\">Education</h2>\n        <hr className=\"mt-0 w-75\" />\n        <Container fluid className=\"w-75 text-left\">\n          <ul>\n            {institutions.map(({ name, program, link, description }) => (\n              <li\n                className=\"text-left\"\n                key={name}\n                style={{ fontSize: \"1.15rem\" }}\n              >\n                <a\n                  className={Utils.getInstitutionClass(name)}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  href={link}\n                >\n                  {name}\n                </a>{\" \"}\n                <small>\n                  <span>\n                    <b>{program}</b>:{\" \"}\n                  </span>\n                  <span className=\"float-md-right\">{description}</span>\n                </small>\n                <br />\n              </li>\n            ))}\n          </ul>\n        </Container>\n        <br />\n        <h2 className=\"m-auto w-75 text-left\">Experience</h2>\n        <hr className=\"mt-0 w-75\" />\n        <br />\n        {history.map(({ node }) => (\n          <div key={node.id}>\n            <WorkHistory\n              frontmatter={node.frontmatter}\n              image={imageMap[node.fields.slug]}\n              html={node.html}\n            />\n            <hr className=\"w-75\" />\n          </div>\n        ))}\n      </Container>\n    </PageLayout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        institutions {\n          name\n          link\n          program\n          description\n        }\n      }\n    }\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/work/\" } }\n      sort: { fields: [frontmatter___startDate], order: DESC }\n    ) {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            company\n            location\n            link\n            position\n            tags\n            startDate(formatString: \"MMMM\")\n            endDate(formatString: \"MMMM, YYYY\")\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n    allFile(\n      filter: {\n        extension: { eq: \"png\" }\n        relativePath: { regex: \"/company/\" }\n        relativeDirectory: { regex: \"/content/work/\" }\n      }\n    ) {\n      edges {\n        node {\n          childImageSharp {\n            fluid(maxWidth: 400) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n          relativePath\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}