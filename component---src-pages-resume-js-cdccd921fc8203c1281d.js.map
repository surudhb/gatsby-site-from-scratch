{"version":3,"sources":["webpack:///./node_modules/react-bootstrap/esm/Image.js","webpack:///./src/utils/helpers.js","webpack:///./src/pages/resume.js"],"names":["Image","string","bool","forwardRef","_ref","ref","bsPrefix","className","fluid","rounded","roundedCircle","thumbnail","props","classes","createElement","displayName","defaultProps","getImageMap","images","regex","hasMultipleImages","limit","reduce","map","image","slug","node","relativePath","match","hasOwnProperty","length","push","childImageSharp","arr","getInstitutionClass","name","includes","data","institutions","site","siteMetadata","history","allMarkdownRemark","edges","allFile","imageMap","Utils","title","href","target","download","style","fontSize","icon","frontmatter","height","src","key","id","fields","html","query"],"mappings":"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","file":"component---src-pages-resume-js-cdccd921fc8203c1281d.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useBootstrapPrefix } from './ThemeProvider';\nexport var propTypes = {\n  /**\n   * @default 'img'\n   */\n  bsPrefix: PropTypes.string,\n\n  /**\n   * Sets image as fluid image.\n   */\n  fluid: PropTypes.bool,\n\n  /**\n   * Sets image shape as rounded.\n   */\n  rounded: PropTypes.bool,\n\n  /**\n   * Sets image shape as circle.\n   */\n  roundedCircle: PropTypes.bool,\n\n  /**\n   * Sets image shape as thumbnail.\n   */\n  thumbnail: PropTypes.bool\n};\nvar defaultProps = {\n  fluid: false,\n  rounded: false,\n  roundedCircle: false,\n  thumbnail: false\n};\nvar Image = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      fluid = _ref.fluid,\n      rounded = _ref.rounded,\n      roundedCircle = _ref.roundedCircle,\n      thumbnail = _ref.thumbnail,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"fluid\", \"rounded\", \"roundedCircle\", \"thumbnail\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'img');\n  var classes = classNames(fluid && bsPrefix + \"-fluid\", rounded && \"rounded\", roundedCircle && \"rounded-circle\", thumbnail && bsPrefix + \"-thumbnail\");\n  return /*#__PURE__*/React.createElement(\"img\", _extends({\n    // eslint-disable-line jsx-a11y/alt-text\n    ref: ref\n  }, props, {\n    className: classNames(className, classes)\n  }));\n});\nImage.displayName = 'Image';\nImage.defaultProps = defaultProps;\nexport default Image;","export default {\n  getImageMap: (images, regex, hasMultipleImages = false, limit = 3) => {\n    return images.reduce((map, image) => {\n      const slug = image.node.relativePath.match(regex)[0]\n      if (hasMultipleImages) {\n        if (map.hasOwnProperty(slug)) {\n          if (map[slug].length <= limit)\n            map[slug].push(image.node.childImageSharp.fluid)\n        } else {\n          const arr = []\n          arr.push(image.node.childImageSharp.fluid)\n          map[slug] = arr\n        }\n      } else {\n        map[slug] = image.node.childImageSharp.fluid\n      }\n      return map\n    }, {})\n  },\n  getInstitutionClass: name => {\n    if (name.includes(\"Waterloo\")) {\n      return `waterloo-link`\n    } else if (name.includes(\"Ottawa\")) {\n      return `ottawa-link`\n    } else {\n      return `nd-link`\n    }\n  },\n}\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { CompanyCard, PageLayout, PageTitle, WorkHistory } from \"../components\"\nimport { SEO, Utils } from \"../utils\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { Container, Row, Image } from \"react-bootstrap\"\n\nexport default ({ data }) => {\n  const institutions = data.site.siteMetadata.institutions || []\n  const history = data.allMarkdownRemark.edges || []\n  const images = data.allFile.edges || []\n  const imageMap = Utils.getImageMap(images, /\\/[work].*\\/|$/)\n  return (\n    <PageLayout>\n      <SEO title=\"Resume\" />\n      <PageTitle title=\"Resume\">\n        &nbsp;\n        <a href=\"../../surudh_bhutani_resume.pdf\" target=\"_blank\" download>\n          <FontAwesomeIcon\n            style={{ fontSize: \"0.9em\" }}\n            icon={[\"fas\", \"file-download\"]}\n            className=\"resume-title-icon\"\n          />\n        </a>\n      </PageTitle>\n      <Container className=\"mx-md-5\" fluid>\n        <br />\n        <h2 className=\"m-auto w-75 text-left\">Technologies</h2>\n        <br />\n        <FontAwesomeIcon icon={[\"fab\", \"java\"]} className=\"resume-icons java\" />\n        <FontAwesomeIcon\n          icon={[\"fab\", \"js-square\"]}\n          className=\"resume-icons js\"\n        />\n        <FontAwesomeIcon\n          icon={[\"fab\", \"html5\"]}\n          className=\"resume-icons html\"\n        />\n        <FontAwesomeIcon icon={[\"fab\", \"css3\"]} className=\"resume-icons css\" />\n        <FontAwesomeIcon\n          icon={[\"fab\", \"swift\"]}\n          className=\"resume-icons swift\"\n        />\n        <br />\n        <FontAwesomeIcon\n          icon={[\"fab\", \"react\"]}\n          className=\"resume-icons reactjs\"\n        />\n        <FontAwesomeIcon\n          icon={[\"fab\", \"node\"]}\n          className=\"resume-icons nodejs\"\n        />\n        <FontAwesomeIcon\n          icon={[\"fab\", \"bootstrap\"]}\n          className=\"resume-icons bootstrap\"\n        />\n        <FontAwesomeIcon icon={[\"fab\", \"sass\"]} className=\"resume-icons sass\" />\n        <br />\n        <FontAwesomeIcon\n          icon={[\"fab\", \"github-alt\"]}\n          className=\"resume-icons github\"\n        />\n        <FontAwesomeIcon icon={[\"fab\", \"jira\"]} className=\"resume-icons jira\" />\n        <FontAwesomeIcon\n          icon={[\"fab\", \"docker\"]}\n          className=\"resume-icons docker\"\n        />\n\n        <h2 className=\"m-auto w-75 text-left\">Education</h2>\n        <br />\n        <Row className=\"w-75 m-auto\">\n          {institutions.map(frontmatter => (\n            <div className=\"col-4\">\n              <Image\n                height=\"100px\"\n                rounded\n                src={`../../icons/${frontmatter.slug}.png`}\n                className=\"align-bottom m-0\"\n              />\n              <CompanyCard frontmatter={frontmatter} />\n            </div>\n          ))}\n        </Row>\n        <br />\n        <h2 className=\"m-auto w-75 text-left\">Experience</h2>\n        <br />\n        {history.map(({ node }) => (\n          <div key={node.id}>\n            <WorkHistory\n              frontmatter={node.frontmatter}\n              image={imageMap[node.fields.slug]}\n              html={node.html}\n            />\n            <br />\n          </div>\n        ))}\n      </Container>\n    </PageLayout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        institutions {\n          company\n          link\n          position\n          startDate\n          endDate\n          slug\n        }\n      }\n    }\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/work/\" } }\n      sort: { fields: [frontmatter___startDate], order: DESC }\n    ) {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            company\n            location\n            link\n            position\n            tags\n            startDate(formatString: \"MMMM, YYYY\")\n            endDate(formatString: \"MMMM, YYYY\")\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n    allFile(\n      filter: {\n        extension: { eq: \"png\" }\n        relativePath: { regex: \"/company/\" }\n        relativeDirectory: { regex: \"/content/work/\" }\n      }\n    ) {\n      edges {\n        node {\n          childImageSharp {\n            fluid(maxWidth: 400) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n          relativePath\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}